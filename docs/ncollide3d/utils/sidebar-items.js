initSidebarItems({"fn":[["ccw_face_normal","Computes the normal of a counter-clock-wise triangle."],["center","Computes the center of a set of point."],["circumcircle","Computes the circumcircle of a triangle."],["is_affinely_dependent_triangle","Tests if three 3D points are approximately aligned."],["is_point_in_triangle","Tests if a point is inside of a triangle."],["median","Computes the median of a set of values."],["point_cloud_support_point","Computes the support point of a cloud of points."],["point_cloud_support_point_id","Computes the index of the support point of a cloud of points."],["point_in_poly2d","Tests if the given point is inside of a polygon with arbitrary orientation."],["remove_unused_points","Given an index buffer, remove from `points` every point that is not indexed."],["sort2","Sorts two values in increasing order."],["sort3","Sorts a set of three values in increasing order."],["tetrahedron_center","Computes the center of a tetrahedron."],["tetrahedron_signed_volume","Computes the signed volume of a tetrahedron."],["tetrahedron_volume","Computes the volume of a tetrahedron."],["triangle_area","Computes the area of a triangle."],["triangle_center","Computes the center of a triangle."],["triangle_perimeter","Computes the perimeter of a triangle."]],"struct":[["DeterministicState","A hasher builder that creates `DefaultHasher` with default keys."],["HashablePartialEq","A structure that implements `Eq` and is hashable even if the wrapped data implements only `PartialEq`."],["RefWithCost","A reference packed with a cost value."],["SortedPair","A pair of elements sorted in increasing order."]],"trait":[["AsBytes","Trait that transforms thing to a slice of u8."],["IsometryOps","Extra operations with isometries."]]});